plugins {
    id 'java'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow'
}

group = 'com.github.PuzzlesHQ'

repositories {
    mavenCentral()
    maven { url "https://libraries.minecraft.net" }
    maven {
        url = "https://jitpack.io"
    }
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
}

sourceSets {
    common
    client
}

configurations {

    allCompileOnly
    clientCompilyOnly.extendsFrom(allCompileOnly)
    commonCompilyOnly.extendsFrom(allCompileOnly)

    clientBundle
    clientImplementation.extendsFrom(clientBundle)

    clientInternal
    clientImplementation.extendsFrom(clientInternal)

    commonBundle
    commonImplementation.extendsFrom(commonBundle)
    clientImplementation.extendsFrom(commonBundle)
}

def natives(String lwjgl_natives) {
    dependencies {
        clientImplementation "org.lwjgl:lwjgl::$lwjgl_natives"
        clientImplementation "org.lwjgl:lwjgl-opengl::$lwjgl_natives"
        clientImplementation "org.lwjgl:lwjgl-glfw::$lwjgl_natives"
    }
}

// Client Dependencies
dependencies {
    clientImplementation 'org.jetbrains:annotations:24.0.0'
    clientImplementation platform("org.lwjgl:lwjgl-bom:$lwjgl_version")

    clientImplementation "org.lwjgl:lwjgl"
    clientImplementation "org.lwjgl:lwjgl-opengl"
    clientImplementation "org.lwjgl:lwjgl-glfw"
    natives("natives-linux")
    natives("natives-linux-arm32")
    natives("natives-linux-arm64")
    natives("natives-macos")
    natives("natives-macos-arm64")
    natives("natives-windows")
    natives("natives-windows-arm64")
    natives("natives-windows-x86")
    clientBundle "org.joml:joml:${joml_version}"

    clientInternal sourceSets.common.output
}

// Common Dependencies
dependencies {
    commonImplementation 'org.jetbrains:annotations:24.0.0'

    commonBundle annotationProcessor("io.github.llamalad7:mixinextras-fabric:$mixin_extras_version")
    commonBundle ("com.github.PuzzlesHQ:Mixin:$mixin_version") {
//        exclude group: "com.google.code.gson", module: "gson"
//        exclude group: "com.google.guava", module: "guava"
    }
    commonBundle "net.sf.jopt-simple:jopt-simple:$jopt_simple_version"

//    commonImplementation "org.apache.logging.log4j:log4j-api:$log4j_version"
//    commonImplementation "org.apache.logging.log4j:log4j-core:$log4j_version"
//    commonBundle "org.apache.logging.log4j:log4j-slf4j-impl:$slf4j_version"
//    commonBundle 'org.slf4j:slf4j-reload4j:2.1.0-alpha1'

    commonBundle "com.github.zafarkhaja:java-semver:0.10.2"

    commonBundle 'org.slf4j:slf4j-ext:1.7.23'
    commonBundle 'org.slf4j:slf4j-api:1.7.23'
    commonBundle "org.apache.logging.log4j:log4j-api:$slf4j_version"
    commonBundle "org.apache.logging.log4j:log4j-core:$slf4j_version"
    commonBundle "org.apache.logging.log4j:log4j-slf4j-impl:$slf4j_version"

    commonBundle "org.reflections:reflections:$reflections_version"
    commonBundle "meteordevelopment:orbit:$eventbus_version"

    commonBundle "org.ow2.asm:asm:$asm_version"
    commonBundle "org.ow2.asm:asm-tree:$asm_version"
    commonBundle "org.ow2.asm:asm-util:$asm_version"
    commonBundle "org.ow2.asm:asm-analysis:$asm_version"
    commonBundle "org.ow2.asm:asm-commons:$asm_version"

    commonBundle "org.hjson:hjson:$hjson_version"
}

tasks.register("buildMergeJar", com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    ArrayList t = new ArrayList();
    Collections.addAll(t, project.configurations.clientInternal, project.configurations.commonBundle, project.configurations.clientBundle)
    configurations = t

    mergeServiceFiles()
    relocate("org.objectweb", "internal.org.objectweb")
    relocate("org.spongepowered.include", "internal")

    archiveClassifier = "merged"
    from sourceSets.client.output
}

tasks.register("buildCommonJar", com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    configurations = Collections.singletonList(project.configurations.commonBundle)

    mergeServiceFiles()
    relocate("org.objectweb", "internal.org.objectweb")
    relocate("org.spongepowered.include", "internal")

    archiveClassifier = "common"
    from sourceSets.common.output
}

tasks.register("buildClientJar", com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    configurations = Collections.singletonList(project.configurations.clientBundle)

    mergeServiceFiles()
    relocate("org.objectweb", "internal.org.objectweb")
    relocate("org.spongepowered.include", "internal")

    archiveClassifier = "client"
    from sourceSets.client.output
}

tasks.register("buildStrippedMergeJar", com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    configurations = project.configurations.clientInternal

    mergeServiceFiles()

    archiveClassifier = "merged-stripped"
    from sourceSets.client.output
}

tasks.register("buildStrippedCommonJar", com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    mergeServiceFiles()

    archiveClassifier = "common-stripped"
    from sourceSets.common.output
}

tasks.register("buildStrippedClientJar", com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    mergeServiceFiles()

    archiveClassifier = "client-stripped"
    from sourceSets.client.output
}

processCommonResources {
    def replacement_properties = [
            "version": ((String)version).contains(".") ? version : "69.69.69"
    ]

    inputs.properties replacement_properties
    replacement_properties.put("project", project)

    filesMatching(["assets/puzzle-loader/core-version.txt"]) {
        expand replacement_properties
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = "puzzle-loader-core"

            artifact source: buildMergeJar, classifier: 'merged', extension: 'jar'
            artifact source: buildClientJar, classifier: 'client', extension: 'jar'
            artifact source: buildCommonJar, classifier: 'common', extension: 'jar'
        }
    }
}

wrapper {
    gradleVersion = "8.5"
    distributionType = Wrapper.DistributionType.ALL
}

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

compileClientJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

compileCommonJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}